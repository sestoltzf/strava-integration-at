"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
var Table_1 = require("./Table");
var cross_fetch_1 = require("cross-fetch");
var App = /** @class */ (function () {
    function App(props, glide) {
        this.props = props;
        this.glide = glide;
    }
    Object.defineProperty(App.prototype, "id", {
        get: function () {
            return this.props.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(App.prototype, "name", {
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves a table by its name.
     *
     * @param name - The name of the table to retrieve.
     * @returns A promise that resolves to the table if found, or undefined.
     */
    App.prototype.getTableNamed = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var tables;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTables()];
                    case 1:
                        tables = _a.sent();
                        return [2 /*return*/, tables === null || tables === void 0 ? void 0 : tables.find(function (t) { return t.name === name; })];
                }
            });
        });
    };
    /**
     * Retrieves all tables from the application.
     *
     * @returns A promise that resolves to an array of tables if successful, or undefined.
     */
    App.prototype.getTables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, id, token, result, tables;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, id = _a.id, token = _a.token;
                        return [4 /*yield*/, this.glide.get("/apps/".concat(id, "/tables"))];
                    case 1:
                        result = _b.sent();
                        if (result.status !== 200)
                            return [2 /*return*/, undefined];
                        return [4 /*yield*/, result.json()];
                    case 2:
                        tables = (_b.sent()).data;
                        return [2 /*return*/, tables.map(function (t) { return _this.table({ table: t.id, name: t.name, columns: {}, token: token }); })];
                }
            });
        });
    };
    /**
     * Constructs a new Table instance for querying.
     *
     * @param props - The properties of the table, excluding the app.
     * @returns The newly created Table instance.
     */
    App.prototype.table = function (props) {
        return new Table_1.Table(__assign({ app: this.props.id }, props), this.glide);
    };
    /**
     * Retrieves the manifest for the app.
     */
    App.prototype.getManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var id, manifestUrl, result, manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = this.props.id;
                        manifestUrl = "https://go.glideapps.com/play/".concat(id, "?manifest");
                        return [4 /*yield*/, (0, cross_fetch_1.default)(manifestUrl)];
                    case 1:
                        result = _a.sent();
                        if (result.status !== 200)
                            return [2 /*return*/, undefined];
                        return [4 /*yield*/, result.json()];
                    case 2:
                        manifest = _a.sent();
                        return [2 /*return*/, manifest];
                }
            });
        });
    };
    return App;
}());
exports.App = App;
//# sourceMappingURL=App.js.map