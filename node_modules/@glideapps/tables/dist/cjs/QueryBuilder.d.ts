import { Query, QueryAnd, QueryOr, Order, Operator, IsNull } from "./types";
export declare class QueryBuilder<TRow, TOmit extends string> implements Query<TRow, TOmit>, QueryAnd<TRow, TOmit>, QueryOr<TRow, TOmit> {
    private props;
    private _limit;
    private _orderBy;
    private _where;
    private _and;
    private _or;
    constructor(props: {
        table: string;
        displayNameToName(name: keyof TRow): string | undefined;
    });
    toSQL(): string;
    orderBy(column: keyof TRow, order?: Order): Omit<Query<TRow, TOmit | "orderBy">, TOmit | "orderBy">;
    limit(n: number): Omit<Query<TRow, TOmit | "limit">, TOmit | "limit">;
    where(column: keyof TRow, compare: Operator, other: keyof TRow | string | number): Omit<QueryAnd<TRow, TOmit | "where"> & QueryOr<TRow, TOmit | "where">, TOmit | "where">;
    where(column: keyof TRow, compare: IsNull): Omit<QueryAnd<TRow, TOmit | "where"> & QueryOr<TRow, TOmit | "where">, TOmit | "where">;
    and(column: keyof TRow, compare: Operator, other: keyof TRow | string | number): Omit<QueryAnd<TRow, TOmit>, TOmit>;
    and(column: keyof TRow, compare: IsNull): Omit<QueryAnd<TRow, TOmit>, TOmit>;
    or(column: keyof TRow, compare: Operator, other: keyof TRow | string | number): Omit<QueryOr<TRow, TOmit>, TOmit>;
    or(column: keyof TRow, compare: IsNull): Omit<QueryOr<TRow, TOmit>, TOmit>;
}
