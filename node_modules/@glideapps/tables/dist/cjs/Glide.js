"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Glide = void 0;
var App_1 = require("./App");
var Table_1 = require("./Table");
var constants_1 = require("./constants");
var cross_fetch_1 = require("cross-fetch");
var Glide = /** @class */ (function () {
    function Glide(props) {
        if (props === void 0) { props = {}; }
        var _a, _b, _c;
        this.props = {
            token: (_a = props.token) !== null && _a !== void 0 ? _a : process.env.GLIDE_TOKEN,
            endpoint: (_b = props.endpoint) !== null && _b !== void 0 ? _b : constants_1.defaultEndpoint,
            endpointREST: (_c = props.endpointREST) !== null && _c !== void 0 ? _c : constants_1.defaultEndpointREST,
            clientID: props.clientID,
        };
    }
    Glide.prototype.endpoint = function (path) {
        if (path === void 0) { path = "/"; }
        // Calls to mutateTables and queryTables should use the function endpoint.
        // TODO remove `endpoint` once we can use the REST endpoint for all calls.
        var base = ["/mutateTables", "/queryTables"].includes(path)
            ? this.props.endpoint
            : this.props.endpointREST;
        if (!base.includes("://")) {
            base = "https://".concat(base);
        }
        return "".concat(base).concat(path);
    };
    Glide.prototype.api = function (route, r) {
        if (r === void 0) { r = {}; }
        var _a = this.props, token = _a.token, clientID = _a.clientID;
        var maybeClientIDObject = clientID !== undefined ? { "X-Glide-Client-ID": clientID } : {};
        return (0, cross_fetch_1.default)(this.endpoint(route), __assign(__assign({ method: "GET" }, r), { headers: __assign(__assign({ Authorization: "Bearer ".concat(token), "Content-Type": "application/json", Accept: "application/json" }, maybeClientIDObject), r.headers) }));
    };
    Glide.prototype.get = function (r) {
        return this.api(r, { method: "GET" });
    };
    Glide.prototype.post = function (r, body) {
        return this.api(r, { method: "POST", body: JSON.stringify(body) });
    };
    Glide.prototype.with = function (props) {
        if (props === void 0) { props = {}; }
        return new Glide(__assign(__assign({}, this.props), props));
    };
    /**
     * Creates a new App instance for querying an app
     *
     * @param props If a string is provided, it is used as the id of the App. If an AppProps object is provided, it is used as the properties for the App.
     * @returns The newly created App instance.
     */
    Glide.prototype.app = function (props) {
        if (typeof props === "string") {
            props = { id: props };
        }
        return new App_1.App(props, this.with(props));
    };
    /**
     * This function creates a new Table object with the provided properties.
     *
     * @param props The properties to create the table with.
     * @returns The newly created table.
     */
    Glide.prototype.table = function (props) {
        return new Table_1.Table(props, this.with(props));
    };
    /**
     * Retrieves all applications.
     *
     * @param props An optional object containing a token.
     * @param props.token An optional token for authentication.
     * @returns A promise that resolves to an array of applications if successful, or undefined.
     */
    Glide.prototype.getApps = function (props) {
        if (props === void 0) { props = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response, apps;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.with(props).get("/apps")];
                    case 1:
                        response = _a.sent();
                        if (response.status !== 200)
                            return [2 /*return*/, undefined];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        apps = (_a.sent()).data;
                        return [2 /*return*/, apps.map(function (idName) { return _this.app(__assign(__assign({}, idName), props)); })];
                }
            });
        });
    };
    /**
     * Retrieves an app by its name.
     *
     * @param name The name of the application to retrieve.
     * @param props An optional object containing a token.
     * @param props.token An optional token for authentication.
     * @returns A promise that resolves to the application if found, or undefined.
     */
    Glide.prototype.getAppNamed = function (name, props) {
        if (props === void 0) { props = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var apps;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getApps(props)];
                    case 1:
                        apps = _a.sent();
                        return [2 /*return*/, apps === null || apps === void 0 ? void 0 : apps.find(function (a) { return a.name === name; })];
                }
            });
        });
    };
    return Glide;
}());
exports.Glide = Glide;
//# sourceMappingURL=Glide.js.map