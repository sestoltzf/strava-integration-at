var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { QueryBuilder } from "./QueryBuilder";
import { MAX_MUTATIONS } from "./constants";
import { throwError } from "./common";
function mapChunks(array, chunkSize, work) {
    return __awaiter(this, void 0, void 0, function () {
        var results, i, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    results = [];
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < array.length)) return [3 /*break*/, 4];
                    return [4 /*yield*/, work(array.slice(i, i + chunkSize))];
                case 2:
                    result = _a.sent();
                    results.push(result);
                    _a.label = 3;
                case 3:
                    i += chunkSize;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, results];
            }
        });
    });
}
function rowID(row) {
    return typeof row === "string" ? row : row.$rowID;
}
var Table = /** @class */ (function () {
    function Table(props, glide) {
        this.props = props;
        this.glide = glide;
        var columns = props.columns;
        this.displayNameToName = Object.fromEntries(Object.entries(columns).map(function (_a) {
            var displayName = _a[0], value = _a[1];
            return typeof value !== "string" && typeof value.name === "string"
                ? [displayName, value.name /* internal name */]
                : [displayName, displayName];
        }));
        this.displayNameToName["$rowID"] = "$rowID";
    }
    Object.defineProperty(Table.prototype, "app", {
        /**
         * @returns The app id.
         */
        get: function () {
            return this.props.app;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "id", {
        /**
         * @returns The table id.
         */
        get: function () {
            return this.props.table;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Table.prototype, "name", {
        /**
         * @returns The display name
         */
        get: function () {
            return this.props.name;
        },
        enumerable: false,
        configurable: true
    });
    Table.prototype.renameOutgoing = function (rows) {
        var rename = this.displayNameToName;
        return rows.map(function (row) {
            return Object.fromEntries(Object.entries(row).map(function (_a) {
                var _b;
                var key = _a[0], value = _a[1];
                return [
                    (_b = rename[key]) !== null && _b !== void 0 ? _b : key,
                    // null is sent as an empty string
                    value === null ? "" : value,
                ];
            }));
        });
    };
    Table.prototype.renameIncoming = function (rows) {
        var columns = this.props.columns;
        var rename = Object.fromEntries(Object.entries(columns).map(function (_a) {
            var displayName = _a[0], value = _a[1];
            return typeof value !== "string" && typeof value.name === "string"
                ? [value.name /* internal name */, displayName]
                : [displayName, displayName];
        }));
        return rows.map(function (row) {
            return Object.fromEntries(Object.entries(row).map(function (_a) {
                var _b;
                var key = _a[0], value = _a[1];
                return [(_b = rename[key]) !== null && _b !== void 0 ? _b : key, value];
            }));
        });
    };
    Table.prototype.add = function (rowOrRows) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, app, table, rows, renamedRows, addedIds, rowIDs;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, app = _a.app, table = _a.table;
                        rows = Array.isArray(rowOrRows) ? rowOrRows : [rowOrRows];
                        renamedRows = this.renameOutgoing(rows);
                        return [4 /*yield*/, mapChunks(renamedRows, MAX_MUTATIONS, function (chunk) { return __awaiter(_this, void 0, void 0, function () {
                                var response, rowIDs;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.glide.post("/apps/".concat(app, "/tables/").concat(table, "/rows"), chunk)];
                                        case 1:
                                            response = _a.sent();
                                            return [4 /*yield*/, throwError(response)];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, response.json()];
                                        case 3:
                                            rowIDs = (_a.sent()).data.rowIDs;
                                            return [2 /*return*/, rowIDs];
                                    }
                                });
                            }); })];
                    case 1:
                        addedIds = _b.sent();
                        rowIDs = addedIds.flat();
                        return [2 /*return*/, Array.isArray(rowOrRows) ? rowIDs : rowIDs[0]];
                }
            });
        });
    };
    Table.prototype.update = function (rows, row) {
        return __awaiter(this, void 0, void 0, function () {
            var updates, _i, rows_1, row_1, _a, app, table;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        updates = {};
                        if (typeof rows === "string") {
                            updates[rows] = row;
                        }
                        else if ("$rowID" in rows) {
                            updates[rows.$rowID] = rows;
                        }
                        else if (Array.isArray(rows)) {
                            for (_i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                                row_1 = rows_1[_i];
                                updates[row_1.$rowID] = row_1;
                            }
                        }
                        else {
                            Object.assign(updates, rows);
                        }
                        _a = this.props, app = _a.app, table = _a.table;
                        return [4 /*yield*/, mapChunks(Object.entries(updates), MAX_MUTATIONS, function (chunk) { return __awaiter(_this, void 0, void 0, function () {
                                var response;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.glide.post("/mutateTables", {
                                                appID: app,
                                                mutations: chunk.map(function (_a) {
                                                    var id = _a[0], row = _a[1];
                                                    return ({
                                                        kind: "set-columns-in-row",
                                                        tableName: table,
                                                        columnValues: _this.renameOutgoing([row])[0],
                                                        rowID: rowID(id),
                                                    });
                                                }),
                                            })];
                                        case 1:
                                            response = _a.sent();
                                            return [4 /*yield*/, throwError(response)];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Table.prototype.delete = function (rowOrRows) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, app, table, rows;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, app = _a.app, table = _a.table;
                        rows = Array.isArray(rowOrRows) ? rowOrRows : [rowOrRows];
                        return [4 /*yield*/, mapChunks(rows, MAX_MUTATIONS, function (chunk) { return __awaiter(_this, void 0, void 0, function () {
                                var response;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.glide.post("/mutateTables", {
                                                appID: app,
                                                mutations: chunk.map(function (row) { return ({
                                                    kind: "delete-row",
                                                    tableName: table,
                                                    rowID: rowID(row),
                                                }); }),
                                            })];
                                        case 1:
                                            response = _a.sent();
                                            return [4 /*yield*/, throwError(response)];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes all rows from the table.
     */
    Table.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rows;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get()];
                    case 1:
                        rows = _a.sent();
                        return [4 /*yield*/, this.delete(rows)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Table.prototype.get = function (rowIDOrQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, app, table, startAt, rows, sql, response, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(typeof rowIDOrQuery === "string")) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getRow(rowIDOrQuery)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        _a = this.props, app = _a.app, table = _a.table;
                        rows = [];
                        sql = rowIDOrQuery === null || rowIDOrQuery === void 0 ? void 0 : rowIDOrQuery(new QueryBuilder({
                            table: table,
                            displayNameToName: function (name) { return _this.displayNameToName[name]; },
                        })).toSQL();
                        _b.label = 3;
                    case 3: return [4 /*yield*/, this.glide.post("/queryTables", {
                            appID: app,
                            queries: [{ tableName: table, sql: sql, startAt: startAt }],
                        })];
                    case 4:
                        response = _b.sent();
                        return [4 /*yield*/, throwError(response)];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, response.json()];
                    case 6:
                        result = (_b.sent())[0];
                        rows = rows.concat(this.renameIncoming(result.rows));
                        startAt = result.next;
                        _b.label = 7;
                    case 7:
                        if (startAt !== undefined) return [3 /*break*/, 3];
                        _b.label = 8;
                    case 8: return [2 /*return*/, rows];
                }
            });
        });
    };
    /**
     * Retrieves the schema of the table.
     *
     * @returns A promise that resolves to the schema of the table.
     */
    Table.prototype.getSchema = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, app, table, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, app = _a.app, table = _a.table;
                        return [4 /*yield*/, this.glide.get("/apps/".concat(app, "/tables/").concat(table, "/schema"))];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, throwError(response)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Object.defineProperty(Table.prototype, "table", {
        // DEPRECATED
        /**
         * @deprecated Use `id` instead.
         */
        get: function () {
            return this.props.table;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds rows to the table.
     *
     * @deprecated Use `add` instead.
     *
     * @param rows An array of rows to add to the table.
     */
    Table.prototype.addRows = function (rows) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.add(rows)];
            });
        });
    };
    /**
     * Adds rows to the table.
     *
     * @deprecated Use `add` instead.
     *
     * @param rows An array of rows to add to the table.
     */
    Table.prototype.addRow = function (row) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.add(row)];
            });
        });
    };
    /**
     * Sets values in a single row in the table.
     *
     * @deprecated Use `update` instead.
     *
     * @param id The ID of the row to set.
     * @param row The row data to set.
     */
    Table.prototype.setRow = function (id, row) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.update(rowID(id), row)];
            });
        });
    };
    /**
     * Deletes multiple rows from the table.
     *
     * @deprecated Use `delete` instead.
     *
     * @param rows An array of row identifiers to delete from the table.
     */
    Table.prototype.deleteRows = function (rows) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(rows)];
            });
        });
    };
    /**
     * Deletes a single row from the table.
     *
     * @deprecated Use `delete` instead.
     *
     * @param row The identifier of the row to delete from the table.
     */
    Table.prototype.deleteRow = function (row) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(row)];
            });
        });
    };
    /**
     * Retrieves all rows from the table. Requires Business or Enterprise.
     *
     * @deprecated Use `get` instead.
     */
    Table.prototype.getRows = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get()];
            });
        });
    };
    /**
     * Retrieves a row from the table. Requires Business or Enterprise.
     *
     * @deprecated Use `get` instead.
     */
    Table.prototype.getRow = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var rows, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        rows = [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 5]);
                        return [4 /*yield*/, this.get(function (q) { return q.where("$rowID", "=", id).limit(1); })];
                    case 2:
                        rows = _b.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        _a = _b.sent();
                        return [4 /*yield*/, this.get()];
                    case 4:
                        // Try again without a query (table is likely not queryable)
                        rows = _b.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, rows.find(function (r) { return rowID(r) === id; })];
                }
            });
        });
    };
    return Table;
}());
export { Table };
//# sourceMappingURL=Table.js.map