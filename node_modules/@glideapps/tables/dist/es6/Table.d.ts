import type { TableProps, Row, ColumnSchema, RowID, FullRow, Query, ToSQL, RowIdentifiable, NullableRow, NullableFullRow, APITableSchema } from "./types";
import { Glide } from "./Glide";
/**
 * Type alias for a row of a given table.
 */
export type RowOf<T extends Table<any>> = T extends Table<infer R> ? FullRow<R> : never;
export declare class Table<T extends ColumnSchema = {}> {
    private props;
    private glide;
    private displayNameToName;
    /**
     * @returns The app id.
     */
    get app(): string;
    /**
     * @returns The table id.
     */
    get id(): string;
    /**
     * @returns The display name
     */
    get name(): string | undefined;
    constructor(props: TableProps<T>, glide: Glide);
    private renameOutgoing;
    private renameIncoming;
    /**
     * Add a row to the table.
     *
     * @param row A row to add.
     */
    add(row: Row<T>): Promise<RowID>;
    /**
     * Adds rows to the table.
     *
     * @param rows An array of rows to add to the table.
     */
    add(rows: Row<T>[]): Promise<RowID[]>;
    /**
     * Update a row in the table.
     *
     * @param id The row id to update.
     * @param row A row to update.
     */
    update(id: RowID, row: NullableRow<T>): Promise<void>;
    /**
     * Update a row in the table.
     *
     * @param row A row to update.
     */
    update(row: NullableFullRow<T>): Promise<void>;
    /**
     * Update multiple rows in the table.
     *
     * @param rows An array of rows to update.
     */
    update(rows: NullableFullRow<T>[]): Promise<void>;
    /**
     * Update multiple rows in the table.
     *
     * @param rows An object of row ids to rows to update.
     */
    update(rows: Record<RowID, NullableRow<T>>): Promise<void>;
    /**
     * Delete a single row from the table.
     *
     * @param row A row or row id to delete from the table.
     */
    delete(row: RowIdentifiable<T>): Promise<void>;
    /**
     * Delete multiple rows from the table.
     *
     * @param rows An array of rows or identifiers to delete.
     */
    delete(rows: RowIdentifiable<T>[]): Promise<void>;
    /**
     * Deletes all rows from the table.
     */
    clear(): Promise<void>;
    /**
     * Get all rows from the table. Requires Business+.
     */
    get(): Promise<FullRow<T>[]>;
    /**
     * Get a single row from the table. Requires Business+.
     *
     * @param rowID The row id to retrieve.
     */
    get(rowID: RowID): Promise<FullRow<T> | undefined>;
    /**
     * Query the table (Big Tables only). Requires Business+.
     *
     * @param query A query.
     */
    get(query: (q: Query<FullRow<T>>) => ToSQL): Promise<FullRow<T>[]>;
    /**
     * Retrieves the schema of the table.
     *
     * @returns A promise that resolves to the schema of the table.
     */
    getSchema(): Promise<{
        data: APITableSchema;
    }>;
    /**
     * @deprecated Use `id` instead.
     */
    get table(): string;
    /**
     * Adds rows to the table.
     *
     * @deprecated Use `add` instead.
     *
     * @param rows An array of rows to add to the table.
     */
    addRows(rows: Row<T>[]): Promise<RowID[]>;
    /**
     * Adds rows to the table.
     *
     * @deprecated Use `add` instead.
     *
     * @param rows An array of rows to add to the table.
     */
    addRow(row: Row<T>): Promise<RowID>;
    /**
     * Sets values in a single row in the table.
     *
     * @deprecated Use `update` instead.
     *
     * @param id The ID of the row to set.
     * @param row The row data to set.
     */
    setRow(id: RowIdentifiable<T>, row: Row<T>): Promise<void>;
    /**
     * Deletes multiple rows from the table.
     *
     * @deprecated Use `delete` instead.
     *
     * @param rows An array of row identifiers to delete from the table.
     */
    deleteRows(rows: RowIdentifiable<T>[]): Promise<void>;
    /**
     * Deletes a single row from the table.
     *
     * @deprecated Use `delete` instead.
     *
     * @param row The identifier of the row to delete from the table.
     */
    deleteRow(row: RowIdentifiable<T>): Promise<void>;
    /**
     * Retrieves all rows from the table. Requires Business or Enterprise.
     *
     * @deprecated Use `get` instead.
     */
    getRows(): Promise<FullRow<T>[]>;
    /**
     * Retrieves a row from the table. Requires Business or Enterprise.
     *
     * @deprecated Use `get` instead.
     */
    getRow(id: RowID): Promise<FullRow<T> | undefined>;
}
