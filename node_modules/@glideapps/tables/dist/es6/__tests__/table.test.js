var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
require("dotenv").config();
import { bigBigTable, table, sleep } from "./test-common";
describe("table", function () {
    jest.setTimeout(60000);
    it("can get rows", function () { return __awaiter(void 0, void 0, void 0, function () {
        var rows;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, table.get()];
                case 1:
                    rows = _a.sent();
                    expect(rows).toBeDefined();
                    return [2 /*return*/];
            }
        });
    }); });
    it("can get more than 10k rows", function () { return __awaiter(void 0, void 0, void 0, function () {
        var rows;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, bigBigTable.get()];
                case 1:
                    rows = _a.sent();
                    expect(rows.length).toBeGreaterThan(10000);
                    return [2 /*return*/];
            }
        });
    }); });
    it("can get the row type", function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/];
        });
    }); });
    it("can add a row", function () { return __awaiter(void 0, void 0, void 0, function () {
        var rowID;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, table.add({
                        name: "Test Item",
                        renamed: "Test Description",
                        stock: 100,
                    })];
                case 1:
                    rowID = _a.sent();
                    expect(rowID).toBeDefined();
                    return [4 /*yield*/, table.delete(rowID)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("can add multiple rows", function () { return __awaiter(void 0, void 0, void 0, function () {
        var rowIDs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, table.add([{}, {}])];
                case 1:
                    rowIDs = _a.sent();
                    expect(rowIDs.length).toBe(2);
                    return [4 /*yield*/, table.delete(rowIDs)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("can add then change a row", function () { return __awaiter(void 0, void 0, void 0, function () {
        var rowID, renamed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, table.add({})];
                case 1:
                    rowID = _a.sent();
                    expect(rowID).toBeDefined();
                    return [4 /*yield*/, table.update(rowID, { name: "Renamed" })];
                case 2:
                    _a.sent();
                    // wait to allow the row to be updated
                    return [4 /*yield*/, sleep(5000)];
                case 3:
                    // wait to allow the row to be updated
                    _a.sent();
                    return [4 /*yield*/, table.get(rowID)];
                case 4:
                    renamed = _a.sent();
                    expect(renamed === null || renamed === void 0 ? void 0 : renamed.name).toBe("Renamed");
                    return [4 /*yield*/, table.delete(rowID)];
                case 5:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("can clear columns", function () { return __awaiter(void 0, void 0, void 0, function () {
        var rowID, renamed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, table.add({ name: "Delete me" })];
                case 1:
                    rowID = _a.sent();
                    return [4 /*yield*/, sleep(1000)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, table.update(rowID, { name: null })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, sleep(1000)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, table.get(rowID)];
                case 5:
                    renamed = _a.sent();
                    expect(renamed === null || renamed === void 0 ? void 0 : renamed.name).toBeUndefined();
                    return [4 /*yield*/, table.delete(rowID)];
                case 6:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("can get schema", function () { return __awaiter(void 0, void 0, void 0, function () {
        var columns;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, table.getSchema()];
                case 1:
                    columns = (_a.sent()).data.columns;
                    expect(columns).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=table.test.js.map