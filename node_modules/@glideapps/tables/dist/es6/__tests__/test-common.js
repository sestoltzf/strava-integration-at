var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
require("dotenv").config();
import { Glide } from "../Glide";
export var glideStaging = new Glide({
    endpoint: "https://staging.heyglide.com/api/container",
    endpointREST: "https://functions.staging.internal.glideapps.com/api",
    token: process.env.GLIDE_TOKEN_STAGING,
});
export var glideStagingWithClient = new Glide({
    endpoint: "https://staging.heyglide.com/api/container",
    endpointREST: "https://functions.staging.internal.glideapps.com/api",
    token: process.env.GLIDE_CLIENT_TOKEN_STAGING,
    clientID: process.env.GLIDE_CLIENT_ID,
});
export var app = glideStaging.app({
    id: "mT91fPcZCWigkZXgSZGJ",
});
export var appWithClient = glideStagingWithClient.app({
    id: "mT91fPcZCWigkZXgSZGJ",
});
export var table = app.table({
    table: "native-table-MX8xNW5WWoJhW4fwEeN7",
    columns: {
        name: { type: "string", name: "Name" },
        stock: { type: "number", name: "Description" },
        renamed: { type: "string", name: "yPXU2" },
    },
});
export var tableWithClient = appWithClient.table({
    table: "native-table-MX8xNW5WWoJhW4fwEeN7",
    columns: {
        name: { type: "string", name: "Name" },
        stock: { type: "number", name: "Description" },
        renamed: { type: "string", name: "yPXU2" },
    },
});
export var bigTable = app.table({
    table: "native-table-9500db9c-fa75-4968-82e3-9d53437893e8",
    columns: {
        name: { type: "string", name: "Name" },
        age: { type: "number", name: "wLP5Z" },
        otherName: { type: "string", name: "vnmf7" },
    },
});
export var bigBigTable = app.table({
    table: "native-table-9d8d43c5-b09b-4723-9c7f-0186991413d6",
    columns: {
        id: { type: "number", name: "Name" },
        value: { type: "number", name: "CBoVo" },
    },
});
test("nothing", function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/];
    });
}); });
export var sleep = function (ms) { return new Promise(function (resolve) { return setTimeout(resolve, ms); }); };
//# sourceMappingURL=test-common.js.map