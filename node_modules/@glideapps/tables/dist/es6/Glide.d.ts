import { App } from "./App";
import { Table } from "./Table";
import type { TableProps, ColumnSchema, AppProps, GlideProps, Tokened } from "./types";
export declare class Glide {
    private props;
    constructor(props?: Partial<GlideProps>);
    private endpoint;
    private api;
    get(r: string): Promise<Response>;
    post(r: string, body: any): Promise<Response>;
    with(props?: Partial<GlideProps>): Glide;
    /**
     * Creates a new App instance for querying an app
     *
     * @param props If a string is provided, it is used as the id of the App. If an AppProps object is provided, it is used as the properties for the App.
     * @returns The newly created App instance.
     */
    app(props: AppProps | string): App;
    /**
     * This function creates a new Table object with the provided properties.
     *
     * @param props The properties to create the table with.
     * @returns The newly created table.
     */
    table<T extends ColumnSchema>(props: TableProps<T>): Table<T>;
    /**
     * Retrieves all applications.
     *
     * @param props An optional object containing a token.
     * @param props.token An optional token for authentication.
     * @returns A promise that resolves to an array of applications if successful, or undefined.
     */
    getApps(props?: Tokened): Promise<App[] | undefined>;
    /**
     * Retrieves an app by its name.
     *
     * @param name The name of the application to retrieve.
     * @param props An optional object containing a token.
     * @param props.token An optional token for authentication.
     * @returns A promise that resolves to the application if found, or undefined.
     */
    getAppNamed(name: string, props?: Tokened): Promise<App | undefined>;
}
