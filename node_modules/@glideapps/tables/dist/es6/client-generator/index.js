var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import camelCase from "lodash/camelCase";
var preamble = "import * as glide from \"@glideapps/tables\";";
function makeColumnSchema(table) {
    return table.columns.map(function (c) {
        return { displayName: c.name, internalName: c.id, type: c.type.kind };
    });
}
function isValidIdentifier(str) {
    // Check for empty string
    if (str === "")
        return false;
    // Check if the first character is a valid start character
    if (!/^[\p{L}_$]/u.test(str[0]))
        return false;
    // Check if the rest of the characters are valid identifier characters
    if (!/^[\p{L}\p{N}_$]*$/u.test(str.slice(1)))
        return false;
    // Check for reserved words
    var reservedWords = new Set([
        "await",
        "break",
        "case",
        "catch",
        "class",
        "const",
        "continue",
        "debugger",
        "default",
        "delete",
        "do",
        "else",
        "export",
        "extends",
        "finally",
        "for",
        "function",
        "if",
        "import",
        "in",
        "instanceof",
        "new",
        "return",
        "super",
        "switch",
        "this",
        "throw",
        "try",
        "typeof",
        "var",
        "void",
        "while",
        "with",
        "yield",
        "enum",
        "null",
        "true",
        "false",
        "NaN",
        "Infinity",
        "undefined",
    ]);
    return !reservedWords.has(str);
}
function columnNamesToObjectPropertyNames(columnNames) {
    var seen = new Set();
    var renamed = {};
    for (var _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {
        var name_1 = columnNames_1[_i];
        var rename = name_1;
        // Make it a valid identifier
        rename = camelCase(rename.replace(/[^a-zA-Z0-9_$]/g, "_"));
        if (!isValidIdentifier(rename)) {
            rename = camelCase("the_" + rename);
        }
        // Avoid conflicts
        var n = 1;
        var unique = rename;
        while (seen.has(unique)) {
            unique = rename + n++;
        }
        seen.add(unique);
        renamed[name_1] = unique;
    }
    return renamed;
}
function tableToJavaScriptColumnSchema(table) {
    var columns = makeColumnSchema(table);
    var displayNameToObjectProperty = columnNamesToObjectPropertyNames(columns.map(function (c) { return c.displayName; }));
    var lines = columns
        .map(function (_a, i) {
        var displayName = _a.displayName, internalName = _a.internalName, type = _a.type;
        var safeProperty = displayNameToObjectProperty[displayName];
        var rhs = "{ type: ".concat(JSON.stringify(type), ", name: ").concat(JSON.stringify(internalName), " }");
        var isLast = i === columns.length - 1;
        return "        ".concat(safeProperty, ": ").concat(rhs).concat(isLast ? "" : ",");
    })
        .join("\n");
    return "{\n".concat(lines, "\n    }");
}
export function tableDefinition(glide, props, appValue, tables) {
    return __awaiter(this, void 0, void 0, function () {
        var app, _a, table, schema, src;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    app = glide.app(__assign(__assign({}, props), { id: props.app }));
                    if (!(tables !== null && tables !== void 0)) return [3 /*break*/, 1];
                    _a = tables;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, app.getTables()];
                case 2:
                    _a = (tables = _b.sent());
                    _b.label = 3;
                case 3:
                    _a;
                    if (tables === undefined)
                        throw new Error("Could not get tables");
                    table = tables.find(function (t) { return t.id === props.table; });
                    if (table === undefined)
                        throw new Error("Could not find table");
                    return [4 /*yield*/, table.getSchema()];
                case 4:
                    schema = _b.sent();
                    src = "export const ".concat(camelCase(table.name), " = ");
                    if (appValue === undefined) {
                        src += "glide.table({\n    app: \"".concat(props.app, "\",");
                    }
                    else {
                        src += "".concat(appValue, ".table({");
                    }
                    src += "\n    name: \"".concat(table.name, "\",\n    table: \"").concat(props.table, "\",\n    columns: ").concat(tableToJavaScriptColumnSchema(schema.data), "\n});");
                    return [2 /*return*/, src];
            }
        });
    });
}
export function appDefinition(glide, props) {
    return __awaiter(this, void 0, void 0, function () {
        var apps, app, tables, appName, src, _i, tables_1, table, tableDeclaration;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, glide.getApps()];
                case 1:
                    apps = _a.sent();
                    if (apps === undefined)
                        throw new Error("Could not get apps");
                    app = apps.find(function (a) { return a.id === props.id; });
                    if (app === undefined)
                        throw new Error("Could not find app");
                    return [4 /*yield*/, app.getTables()];
                case 2:
                    tables = _a.sent();
                    if (tables === undefined)
                        throw new Error("Could not get tables");
                    appName = camelCase(app.name);
                    src = preamble;
                    src += "\n\nexport const ".concat(appName, " = glide.app({\n    name: \"").concat(app.name, "\",\n    id: \"").concat(props.id, "\",\n});");
                    _i = 0, tables_1 = tables;
                    _a.label = 3;
                case 3:
                    if (!(_i < tables_1.length)) return [3 /*break*/, 6];
                    table = tables_1[_i];
                    return [4 /*yield*/, tableDefinition(glide, __assign(__assign({}, props), { app: props.id, table: table.id, columns: {} }), appName, tables)];
                case 4:
                    tableDeclaration = _a.sent();
                    src += "\n\n" + tableDeclaration;
                    _a.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6: return [2 /*return*/, src];
            }
        });
    });
}
//# sourceMappingURL=index.js.map